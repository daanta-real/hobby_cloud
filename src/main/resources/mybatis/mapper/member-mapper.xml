<?xml version="1.0" encoding="UTF-8" ?>

<!-- 
	myBatis 매퍼 파일
	- DBMS에서 실행할 SQL 구문을 저장하는 XML 파일
	- namespace를 통해서 여러 개의 매퍼를 구분한다
	- 테이블 당 1개씩 만드는 것이 일반적이며, 따라서 namespace를 테이블명으로 작성하면 구분이 용이하다.
	- <insert> , <select> , <update> , <delete>를 이용해서 CRUD 구문을 작성한다.
	- 각 구문은 외부에서 호출이 가능하도록 반드시 ID를 겹치지 않게 부여해야 한다.
	- parameterType 은 구문을 실행하기 위해 필요한 데이터의 형태를 말한다.
	- resultType은 구문을 실행한 결과를 어떤 형태로 변환해야 하는지를 말한다.
 -->

<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="member">

	<!-- 등록을 하려면 시퀀스번호를 얻어내야 한다 -->
	<select id="seq" resultType="integer">
		SELECT member_seq.nextval FROM DUAL
	</select>
	
	<!-- memberId로 단일조회 -->
	<select id="get" parameterType="string" resultType="MemberDto">
		SELECT * FROM member
		WHERE member_id = #{memberId}
	</select>
	
	<!--memberIdx로 단일조회 -->
	<select id="getbyIdx" parameterType="Integer" resultType="MemberDto">
		SELECT * FROM member
		WHERE member_idx = #{memberIdx}
	</select>		
  	
	<!-- 등록 -->
	<insert id="insert" parameterType="MemberDto">
		INSERT INTO member (
			member_idx, member_id, member_pw,member_nick, 
			member_email, member_phone, member_region, member_gender
		)
		VALUES (
			#{memberIdx}, #{memberId}, #{memberPw}, #{memberNick},
			#{memberEmail}, #{memberPhone}, #{memberRegion}, #{memberGender}
		)
	</insert>
	
	<!-- 비밀번호 변경 -->
	<update id="changePassword" parameterType="MemberDto">
		UPDATE member SET member_pw = #{changePw}
		WHERE member_idx = #{memberIdx}
	</update>
	
	<!-- 이메일 변경 -->
	<update id="changeEmail" parameterType="map">
		UPDATE member SET member_email = #{memberEmail}
		WHERE member_idx = #{memberIdx}
	</update>
	
	<!-- 
		개인정보 변경
		- changeInformation1 : 자기자신의 정보 수정
		- changeInformation2 : 관리자의 정보 수정
		- chagneInformation : 통합 정보 수정 
	-->
	
	<update id="changeInformation1" parameterType="MemberDto">
		UPDATE member
		SET
			member_nick = #{memberNick},
			member_email = #{memberEmail},
			member_phone = #{memberPhone}
			member_region = #{memberRegion}
		WHERE
			member_idx = #{memberIdx}
	</update>
	
	<update id="changeInformation2" parameterType="MemberDto">
		UPDATE member
		SET
			member_nick = #{memberNick},
			member_email = #{memberEmail},
			member_phone = #{memberPhone}
			member_region = #{memberRegion}
			member_point = #{memberPoint},
			member_grade_name = #{memberGradeName}
		WHERE
			member_idx = #{memberIdx}
	</update>
	
	<update id="changeInformation" parameterType="MemberDto">
		UPDATE member
		<!-- set을 이용하여 수정항목을 동적으로 배치(단 마지막 콤마는 반드시 작성) -->
		<set>
			<if test="memberNick != null">
				member_nick = #{memberNick},
			</if>
			<if test="memberEmail != null">
				member_email = #{memberEmail},
			</if>
			<if test="memberPhone != null">
				member_phone = #{memberPhone},
			</if>
			<if test="memberRegion != null">
				member_region = #{memberRegion},
			</if>
			<if test="memberPoint != null">
				member_point = #{memberPoint},
			</if>
			<if test="memberGradeName != null">
				member_grade_name = #{memberGradeName},
			</if>
		</set>
		WHERE member_idx = #{memberIdx}
	</update>	

	
	<!-- 탈퇴 -->
	<delete id="quit" parameterType="integer">
		delete member WHERE member_idx = #{memberIdx}
	</delete>
	

	<!-- 일반회원을 강사로 -->	
	<update id="changeGradeTutor" parameterType="int">
		update member set
		member_grade_name = '강사'
		where member_idx = #{memberIdx}
	</update>
	
	<!-- 강사를 일반회원으로 -->
	<update id="changeGradeNormal" parameterType="int">
		update member set
		member_grade_name = '회원'
		where member_idx = #{memberIdx}
	</update>

	<!-- 닉네임 중복 조회 -->
	<select id="findNick" parameterType="string" resultType="MemberDto">
		SELECT * FROM member
		WHERE member_nick = #{memberNick}
	</select>
	
	<!-- 아이디찾기(이메일) -->
	<select id="idFindMail" parameterType="map" resultType="MemberDto">
		SELECT * FROM MEMBER WHERE member_nick = #{memberNick} AND member_email = #{memberEmail}
	</select>
	
	<!-- 비밀번호찾기(이메일) -->
	<select id="pwFindMail" parameterType="map" resultType="MemberDto">
		SELECT * FROM MEMBER WHERE member_id = #{memberId} AND member_nick = #{memberNick} AND member_email = #{memberEmail} 
	</select>
	
	<!-- 임시 비밀번호 업데이트 -->
	<update id="tempPw" parameterType="map">
		UPDATE member SET member_pw = #{memberPw}
		WHERE member_id = #{memberId} 
	</update>
	
	<!-- 회원 목록 -->
	<select id="list" resultType="MemberListVO">
		select * from member m left outer join
	 (select distinct member_idx, min(member_Profile_idx) as member_Profile_idx
	  from member_Profile group by member_idx) f 
	  on  f.member_idx = m.member_idx  
	order by m.member_idx desc
	</select>

	<!-- 회원 총 개수 구하기 -->
	<select id="listCount" resultType="int" >
	select count(*) as BNO from (
	  select * from member m left outer join
	 (select distinct member_idx, min(member_Profile_idx) as member_Profile_idx
	  from member_Profile group by member_idx) f 
	  on  f.member_idx = m.member_idx )
	</select>
	
	<!-- 목록페이지 목록 페이지 네이션 적용 -->	
	<select id="listPage" resultType="MemberListVO" parameterType="Criteria">
		select * from(
		select rownum  rn , TMP.* from(
		select * from member m left outer join
		 (select distinct member_idx, min(member_Profile_idx) as member_Profile_idx
		 from member_Profile group by member_idx) f 
		on  f.member_idx = m.member_idx 
		 order by m.member_idx desc
		  )TMP
		) where rn between #{rowStart} and #{rowEnd}
	</select>
	

	<!-- 상세 조회 -->	
<!--   	<select id="get" resultType="MemberListVO">
    select m.*,  
			f.member_profile_idx, 
			c.lec_category_name
	from member m  
			left outer join
			member_profile f 
			ON f.member_idx = m.member_idx
		    left outer join
		    member_category c
		    on m.member_idx = c.member_idx
	where m.member_idx = #{memberIdx};
	</select> -->

 		<!-- 회원 목록 및 검색 -->
		<select id ="listSearch" parameterType="MemberSearchVO" resultType="MemberListVO">
		 select * from member m left outer join
			 (select distinct member_idx, min(member_Profile_idx) as member_Profile_idx
			  from member_Profile group by member_idx) f 
		  on  f.member_idx = m.member_idx  
		  <where> 
		 	<if test="memberId != '' ">
		  	AND instr(member_id,#{memberId}) >0
		 	 </if>
		  	<if test="memberNick != null">
		   	AND instr(member_nick,#{memberNick}) >0
		 	</if>
		 	<if test="memberGradeName != null">
		   	AND instr(member_grade_name,#{memberGradeName}) >0
		 	</if>
		 	<if test="category != null">
		 	AND lec_category_name in
			<foreach item="statOne" collection="category" open="(" close=")" separator="," >
			#{statOne}
			</foreach>
		</if> 
		  </where>
		  order by m.member_idx desc
		</select>

	<!-- 특정 회원의 포인트 증감 처리 -->
	<update id="pointModify" parameterType="memberDto">
		UPDATE
			member
		SET
			member_point = member_point + #{memberPoint}
		WHERE
			member_idx = #{memberIdx}
	</update>

	<!-- 특정 회원의 포인트를 특정 값으로 강제변경 -->
	<update id="pointForceToValue" parameterType="memberDto">
		UPDATE
			member
		SET
			member_point = #{memberPoint}
		WHERE
			member_idx = #{memberIdx}
	</update>

</mapper>