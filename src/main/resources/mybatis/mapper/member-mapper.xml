<?xml version="1.0" encoding="UTF-8" ?>

<!-- 
	myBatis 매퍼 파일
	- DBMS에서 실행할 SQL 구문을 저장하는 XML 파일
	- namespace를 통해서 여러 개의 매퍼를 구분한다
	- 테이블 당 1개씩 만드는 것이 일반적이며, 따라서 namespace를 테이블명으로 작성하면 구분이 용이하다.
	- <insert> , <select> , <update> , <delete>를 이용해서 CRUD 구문을 작성한다.
	- 각 구문은 외부에서 호출이 가능하도록 반드시 ID를 겹치지 않게 부여해야 한다.
	- parameterType 은 구문을 실행하기 위해 필요한 데이터의 형태를 말한다.
	- resultType은 구문을 실행한 결과를 어떤 형태로 변환해야 하는지를 말한다.
 -->

<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="member">

	<!-- 등록을 하려면 시퀀스번호를 얻어내야 한다 -->
	<select id="seq" resultType="integer">
		SELECT member_seq.nextval FROM DUAL
	</select>
	
	<!-- memberId로 단일조회 -->
	<select id="get" parameterType="string" resultType="MemberDto">
		SELECT * FROM member
		WHERE member_id = #{memberId}
	</select>
	
	<!--memberIdx로 단일조회 -->
	<select id="getbyIdx" parameterType="Integer" resultType="MemberDto">
		SELECT * FROM member
		WHERE member_idx = #{memberIdx}
	</select>		
  	
	<!-- 등록 -->
	<insert id="insert" parameterType="MemberDto">
		INSERT INTO member (
			member_idx, member_id, member_pw,member_nick, 
			member_email, member_phone, member_region, member_gender
		)
		VALUES (
			#{memberIdx}, #{memberId}, #{memberPw}, #{memberNick},
			#{memberEmail}, #{memberPhone}, #{memberRegion}, #{memberGender}
		)
	</insert>
	
	<!-- 비밀번호 변경 -->
	<update id="changePassword" parameterType="MemberDto">
		UPDATE member SET member_pw = #{changePw}
		WHERE member_idx = #{memberIdx}
	</update>
	
	<!-- 비밀번호 변경 -->
	<update id="changeEmail" parameterType="map">
		UPDATE member SET member_email = #{memberEmail}
		WHERE member_id = #{memberId}
	</update>
	
	<!-- 
		개인정보 변경
		- changeInformation1 : 자기자신의 정보 수정
		- changeInformation2 : 관리자의 정보 수정
		- chagneInformation : 통합 정보 수정 
	-->
	
	<update id="changeInformation1" parameterType="MemberDto">
		UPDATE member
		SET
			member_nick = #{memberNick},
			member_email = #{memberEmail},
			member_phone = #{memberPhone}
			member_region = #{memberRegion}
		WHERE
			member_idx = #{memberIdx}
	</update>
	
	<update id="changeInformation2" parameterType="MemberDto">
		UPDATE member
		SET
			member_nick = #{memberNick},
			member_email = #{memberEmail},
			member_phone = #{memberPhone}
			member_region = #{memberRegion}
			member_point = #{memberPoint},
			member_grade_name = #{memberGradeName}
		WHERE
			member_idx = #{memberIdx}
	</update>
	
	<update id="changeInformation" parameterType="MemberDto">
		UPDATE member
		<!-- set을 이용하여 수정항목을 동적으로 배치(단 마지막 콤마는 반드시 작성) -->
		<set>
			<if test="memberNick != null">
				member_nick = #{memberNick},
			</if>
			<if test="memberEmail != null">
				member_email = #{memberEmail},
			</if>
			<if test="memberPhone != null">
				member_phone = #{memberPhone},
			</if>
			<if test="memberRegion != null">
				member_region = #{memberRegion},
			</if>
			<if test="memberPoint != null">
				member_point = #{memberPoint},
			</if>
			<if test="memberGradeName != null">
				member_grade_name = #{memberGradeName},
			</if>
		</set>
		WHERE member_idx = #{memberIdx}
	</update>	

	
	<!-- 탈퇴 -->
	<delete id="quit" parameterType="integer">
		delete member WHERE member_idx = #{memberIdx}
	</delete>
	

	<!-- 일반회원을 강사로 -->	
	<update id="changeGradeTutor" parameterType="int">
		update member set
		member_grade_name = '강사'
		where member_idx = #{memberIdx}
	</update>
	<!-- 강사를 일반회원으로 -->
	<update id="changeGradeNormal" parameterType="int">
		update member set
		member_grade_name = '회원'
		where member_idx = #{memberIdx}
	</update>

	<!-- 닉네임 중복 조회 -->
	<select id="findNick" parameterType="string" resultType="MemberDto">
		SELECT * FROM member
		WHERE member_nick = #{memberNick}
	</select>
	
	<!-- 아이디찾기(이메일) -->
	<select id="idFindMail" parameterType="map" resultType="MemberDto">
		SELECT * FROM MEMBER WHERE member_nick = #{memberNick} AND member_email = #{memberEmail}
	</select>
	
	<!-- 비밀번호찾기(이메일) -->
	<select id="pwFindMail" parameterType="map" resultType="MemberDto">
		SELECT * FROM MEMBER WHERE member_id = #{memberId} AND member_nick = #{memberNick} AND member_email = #{memberEmail} 
	</select>
	
	<!-- 임시 비밀번호 업데이트 -->
	<update id="tempPw" parameterType="map">
		UPDATE member SET member_pw = #{memberPw}
		WHERE member_id = #{memberId} 
	</update>
	
	<!-- 관리자용: 멤버 목록 조회 -->
	<!-- member_Idx로 list 조회 -->
 	<select id="list" resultType="MemberListVO">
		SELECT m.member_idx, m.member_grade_name, m.member_id,
                	m.member_nick, m.member_email, m.member_phone, m.member_registered,
                	m.member_point, m.member_region, m.member_gender, 
                c.lec_category_name,
                f.member_profile_idx                
				FROM member m
				LEFT OUTER JOIN 
				member_category c
				ON  m.member_idx = c.member_idx
				LEFT OUTER JOIN 
				member_profile f
				ON  m.member_idx = f.member_idx
		where member_id = #{memberId};
	</select>

<!-- 	<select id="search"
			resultType="com.kh.hobbycloud.vo.pay.PaidVO"
			parameterType="com.kh.hobbycloud.vo.pay.PaidSearchVO">
		SELECT p.*, m.member_id, m.member_nick
		FROM paid p
		INNER JOIN member m
			ON p.member_idx = m.member_idx
		<where>
			<if test="memberIdx != null and !memberIdx.equals('')">AND INSTR(p.member_idx, #{memberIdx}) > 0</if>
			<if test="memberId != null and !memberId.equals('')">AND INSTR(m.member_id, #{memberId}) > 0</if>
			<if test="memberNick != null and !memberNick.equals('')">AND INSTR(m.member_nick, #{memberNick}) > 0</if>
			<if test="paidRegistered_start != null and !paidRegistered_start.equals('')">
				AND p.paid_registered <![CDATA[>=]]> to_date(#{paidRegistered_start}, 'YYYY-MM-DD HH24:MI:SS')
			</if>
			<if test="paidRegistered_end != null and !paidRegistered_end.equals('')">
				AND p.paid_registered <![CDATA[<=]]> to_date(#{paidRegistered_end}, 'YYYY-MM-DD HH24:MI:SS')
			</if>
			<if test="paidPrice_min != null and !paidPrice_min.equals('')">AND p.paid_price <![CDATA[>=]]> #{paidPrice_min}</if>
			<if test="paidPrice_max != null and !paidPrice_max.equals('')">AND p.paid_price <![CDATA[<=]]> #{paidPrice_max}</if>
			<if test="paidStatusList != null and !paidStatusList.equals('')">AND p.paid_status in
				<foreach item="statOne" collection="paidStatusList" open="(" close=")" separator="," >#{statOne}</foreach>
			</if>
		</where>
		ORDER BY paid_idx DESC
	</select>-->


</mapper>