<?xml version="1.0" encoding="UTF-8" ?>

<!-- 
	myBatis 매퍼 파일
	- DBMS에서 실행할 SQL 구문을 저장하는 XML 파일
	- namespace를 통해서 여러 개의 매퍼를 구분한다
	- 테이블 당 1개씩 만드는 것이 일반적이며, 따라서 namespace를 테이블명으로 작성하면 구분이 용이하다.
	- <insert> , <select> , <update> , <delete>를 이용해서 CRUD 구문을 작성한다.
	- 각 구문은 외부에서 호출이 가능하도록 반드시 ID를 겹치지 않게 부여해야 한다.
	- parameterType 은 구문을 실행하기 위해 필요한 데이터의 형태를 말한다.
	- resultType은 구문을 실행한 결과를 어떤 형태로 변환해야 하는지를 말한다.
 -->

<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="noticeFile">
	<!--등록을 하려면 시퀀스 번호를 얻어내야 한다 -->
	<select id="getSequence" resultType="int">
		select notice_file_seq.nextval from dual
	</select>
<!-- 소모임 추가 -->
	<insert id="save" parameterType="noticeFileDto">
		INSERT INTO notice_file
		VALUES(
			#{noticeFileIdx}, #{noticeIdx}, #{noticeFileMemberName}, #{noticeFileServerName}, #{noticeFileSize}, #{noticeFileType}
		)
	</insert>
	
	<!-- 소모임 첨부파일 DTO 획득 by 파일번호 -->
	<select id="getNo" parameterType="int" resultType="noticeFileDto">
		SELECT * FROM notice_file
		WHERE notice_file_idx = #{noticeFileIdx}
	</select>
	
	<!-- 소모임 첨부파일 DTO 획득 by idx -->
	<select id="getIdx" parameterType="int" resultType="noticeFileDto">
		SELECT * FROM notice_file
		WHERE notice_idx = #{noticeIdx}
	</select>
	
	<delete id="delete" parameterType="int">
	  delete from notice_file where notice_idx=#{noticeIdx}
	</delete>
	<delete id="deleteAjax" parameterType="int">
	delete from notice_file where notice_file_idx=#{noticeFileIdx}
	</delete>
	
	<delete id="deleteList" parameterType="map">
		DELETE FROM
			notice_file
		WHERE
			notice_idx = #{noticeIdx}
			<if test="list != null">
				AND notice_file_idx IN
				<foreach collection="list" item="one" open="(" close=")" separator=",">#{one}</foreach>
			</if>
			
	</delete>	

	

	
</mapper>