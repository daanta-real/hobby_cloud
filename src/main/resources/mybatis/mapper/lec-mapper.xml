<?xml version="1.0" encoding="UTF-8" ?>

<!-- 
	myBatis 매퍼 파일
	- DBMS에서 실행할 SQL 구문을 저장하는 XML 파일
	- namespace를 통해서 여러 개의 매퍼를 구분한다
	- 테이블 당 1개씩 만드는 것이 일반적이며, 따라서 namespace를 테이블명으로 작성하면 구분이 용이하다.
	- <insert> , <select> , <update> , <delete>를 이용해서 CRUD 구문을 작성한다.
	- 각 구문은 외부에서 호출이 가능하도록 반드시 ID를 겹치지 않게 부여해야 한다.
	- parameterType 은 구문을 실행하기 위해 필요한 데이터의 형태를 말한다.
	- resultType은 구문을 실행한 결과를 어떤 형태로 변환해야 하는지를 말한다.
 -->

<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="lec">
	
	<!-- 등록을 하려면 시퀀스번호를 얻어내야 한다 -->
	<select id="seq" resultType="int">
		select lec_seq.nextval from dual
	</select>
	
	<!-- 강좌 등록 -->
	<insert id="register" parameterType="LecDto">
		insert into lec
		values (
			#{lecIdx}, #{tutorIdx}, #{lecCategoryName}, 
			<choose>
				<when test="placeIdx != null">
				#{placeIdx},
				</when>
				<otherwise>
				null,
				</otherwise>
			</choose>
			#{lecName},
			#{lecDetail}, sysdate , #{lecPrice}, #{lecHeadCount}, #{lecContainsCount},
			#{lecStart}, #{lecEnd}, #{lecLocRegion}, #{lecLocLatitude}, #{lecLocLongitude},
			0, 0, 0
		)
	</insert>
<!-- 	<insert id="registerVO" parameterType="LecDto"> -->
<!-- 		insert into lec -->
<!-- 		values ( -->
<!-- 			lec_seq.nextval, 1, #{lecCategoryName}, #{placeIdx}, #{lecName}, -->
<!-- 			#{lecDetail}, sysdate , #{lecPrice}, #{lecHeadCount}, #{lecContainsCount}, -->
<!-- 			#{lecStart}, #{lecEnd}, #{lecLocRegion}, null, null, -->
<!-- 			0, 0, 0 -->
<!-- 		) -->
<!-- 	</insert> -->
	
	<!-- 게시글 총 개수 구하기 -->
	<select id="listCount" resultType="int" >
	select count(*) as BNO from (
		select L.lec_idx, L.lec_category_name, L.lec_name, M.member_nick, L.lec_price, L.lec_head_count, 
		    L.lec_contains_count, L.lec_start, L.lec_end, L.lec_loc_region, f.lec_file_idx,
		    (select count(is_like) from lec_like where lec_idx = L.lec_idx and is_like = 1)as lec_like
		    from lec L
		left outer join tutor T on L.tutor_idx = T.tutor_idx
		left outer join member M on T.member_idx = M.member_idx
		left outer join
		(select distinct lec_idx, min(lec_file_idx) as lec_file_idx
		  from lec_file group by lec_idx) f 
		  on  f.lec_idx = l.lec_idx
		)
	</select>
	
	<!-- 목록페이지 목록 페이지 네이션 적용 -->
	<select id="listPage" resultType="LecListVO" parameterType="LecCriteria">
	select * from(
	select rownum  rn , TMP.* from(
		select L.lec_idx, L.lec_category_name, L.lec_name, M.member_nick, L.lec_price, L.lec_head_count, 
		    L.lec_contains_count, L.lec_start, L.lec_end, L.lec_loc_region, f.lec_file_idx,
		    (select count(is_like) from lec_like where lec_idx = L.lec_idx and is_like = 1)as lec_like
		    from lec L
		left outer join tutor T on L.tutor_idx = T.tutor_idx
		left outer join member M on T.member_idx = M.member_idx
		left outer join
		(select distinct lec_idx, min(lec_file_idx) as lec_file_idx
		  from lec_file group by lec_idx) f 
		  on  f.lec_idx = l.lec_idx
		  order by l.lec_idx desc
	  )TMP
	) where rn between #{rowStart} and #{rowEnd}
	</select>
	
	<!-- 강좌 상세 -->
	<select id="get" parameterType="int" resultType="LecDetailVO">
		select L.*, T.tutor_detail, T.tutor_registered , M.member_idx, M.member_nick, M.member_email, M.member_phone, 
		P.place_name, P.place_detail, 
		(select count(is_like) from lec_like where lec_idx = L.lec_idx and is_like = 1)as lec_like
		from lec L
		inner join tutor T on L.tutor_idx = T.tutor_idx
		left outer join place P on L.place_idx = P.place_idx
		inner join member M on T.member_idx = M.member_idx
		where lec_idx = #{lecIdx}
	</select>
	
	<!-- 강좌 목록 -->
	<select id="list" resultType="LecListVO">
		select L.lec_idx, L.lec_category_name, L.lec_name, M.member_nick, L.lec_price, L.lec_head_count, 
		    L.lec_contains_count, L.lec_start, L.lec_end, L.lec_loc_region, f.lec_file_idx,
		    (select count(is_like) from lec_like where lec_idx = L.lec_idx and is_like = 1)as lec_like
		    from lec L
		left outer join tutor T on L.tutor_idx = T.tutor_idx
		left outer join member M on T.member_idx = M.member_idx
		left outer join
		(select distinct lec_idx, min(lec_file_idx) as lec_file_idx
		  from lec_file group by lec_idx) f 
		  on  f.lec_idx = l.lec_idx
		  order by l.lec_idx desc
	</select>
	
	<!-- 검색 페이지 페이지네이션 적용 -->
	<select id="listSearchBy" parameterType="LecCriteriaSearch" resultType="LecListVO">
		select * from(
		select rownum  rn , TMP.* from(
		select L.lec_idx, L.lec_category_name, L.lec_name, M.member_nick, L.lec_price, L.lec_head_count, 
		    L.lec_contains_count, L.lec_start, L.lec_end, L.lec_loc_region, f.lec_file_idx,
		    (select count(is_like) from lec_like where lec_idx = L.lec_idx and is_like = 1)as lec_like
		    from lec L
		left outer join tutor T on L.tutor_idx = T.tutor_idx
		left outer join member M on T.member_idx = M.member_idx
		left outer join
		(select distinct lec_idx, min(lec_file_idx) as lec_file_idx
		  from lec_file group by lec_idx) f 
		  on  f.lec_idx = l.lec_idx
		
		<where>
			<if test="lecIdx != null and lecIdx != ''">
			and lec_idx = #{lecIdx}
			</if>
			<if test="lecCategoryName != null and lecCategoryName != ''">
				and lec_category_name in
				<foreach item="statOne" collection="lecCategoryName" open="(" close=")" separator="," >
				#{statOne}
				</foreach>
			</if>
			<if test="lecName != null and lecName != ''">
			and instr(lec_name, #{lecName}) > 0
			</if> 
			<if test="memberNick != '' and memberNick != null">
			and instr(member_nick, #{memberNick}) > 0
			</if>
			<if test="lecLocRegion != null and lecLocRegion != ''">
				and
<!-- 				<foreach item="regionOne" collection="lecLocRegion" separator="or"> -->
					instr(lec_loc_region, #{lecLocRegion}) > 0
<!-- 				</foreach> -->
			</if>
			<!-- choose 구문은 switch 처럼 when이 case 역할, otherwise가 default 역할 -->
			<choose>
				<when test="minPrice != '' and minPrice != null and maxPrice != '' and maxPrice != null">
					and lec_price between #{minPrice} and #{maxPrice}
				</when>
				<when test="minPrice != '' and minPrice != null">
					<!-- CDATA 구문을 작성하면 해당 영역은 XML로 해석되지 않으므로 특수문자를 작성할 수 있다 -->
					<![CDATA[ and lec_price >= #{minPrice} ]]>
				</when>
				<when test="maxPrice != '' and maxPrice != null">
					<![CDATA[	 and lec_price <= #{maxPrice} ]]>
				</when>
			</choose>
			
			<choose>
				<when test="minCount != '' and minCount != null and maxCount != '' and maxCount != null">
				and lec_head_count between #{minCount} and #{maxCount}
				</when>
				<when test="minCount != '' and minCount != null">
				<!-- CDATA 구문을 작성하면 해당 영역은 XML로 해석되지 않으므로 특수문자를 작성할 수 있다 -->
				<![CDATA[			
				and lec_head_count >= #{minCount}
				]]>
				</when>
				<when test="maxCount != '' and maxCount != null">
				<![CDATA[			
				and lec_head_count <= #{maxCount}
				]]>
				</when>
			</choose>
			
			<choose>
				<when test="minConCount != '' and minConCount != null and maxConCount != '' and maxConCount != null">
				and lec_contains_count between #{minConCount} and #{maxConCount}
				</when>
				<when test="minConCount != '' and minConCount != null">
				<!-- CDATA 구문을 작성하면 해당 영역은 XML로 해석되지 않으므로 특수문자를 작성할 수 있다 -->
				<![CDATA[			
				and lec_contains_count >= #{minConCount}
				]]>
				</when>
				<when test="maxConCount != '' and maxConCount != null">
				<![CDATA[			
				and lec_contains_count <= #{maxConCount}
				]]>
				</when>
			</choose>
			
<!-- 			<if test="lecStartStart != null and lecStartFinish != null"> -->
<!-- 			and lec_start between  -->
<!-- 				to_date(#{lecStartStart}||' '||'00:00:00', 'YYYY-MM-DD HH24:MI:SS')  -->
<!-- 				and  -->
<!-- 				to_date(#{lecStartFinish}||' '||'23:59:59', 'YYYY-MM-DD HH24:MI:SS') -->
<!-- 			</if> -->
<!-- 			<if test="lecEndStart != null and lecEndFinish != null"> -->
<!-- 			and expire between  -->
<!-- 				to_date(#{lecEndStart}||' '||'00:00:00', 'YYYY-MM-DD HH24:MI:SS')  -->
<!-- 				and  -->
<!-- 				to_date(#{lecEndFinish}||' '||'23:59:59', 'YYYY-MM-DD HH24:MI:SS') -->
<!-- 			</if> -->
		</where>
		
<!-- 		<if test="orders != null and orders.size() > 0"> -->
<!-- 			order by  -->
<!-- 			<foreach item="vo" collection="orders" separator=","> -->
<!-- 				${vo.order} ${vo.sort} -->
<!-- 			</foreach> -->
<!-- 		</if> -->
		order by l.lec_idx desc
		  )TMP
		) where rn between #{rowStart} and #{rowEnd}
	</select>
	
	<!-- 검색 페이지 페이지네이션 적용 -->
	<select id="listCountBy" parameterType="LecSearchVO" resultType="int">
		select count(*) as BNO from (
		select L.lec_idx, L.lec_category_name, L.lec_name, M.member_nick, L.lec_price, L.lec_head_count, 
			L.lec_contains_count, L.lec_start, L.lec_end, L.lec_loc_region,
			(select count(is_like) from lec_like where lec_idx = L.lec_idx and is_like = 1)as lec_like
			from lec L
		left outer join tutor T on L.tutor_idx = T.tutor_idx
		left outer join member M on T.member_idx = M.member_idx
		
		<where>
			<if test="lecIdx != null and lecIdx != ''">
			and lec_idx = #{lecIdx}
			</if>
			<if test="lecCategoryName != null and lecCategoryName != ''">
				and lec_category_name in
				<foreach item="statOne" collection="lecCategoryName" open="(" close=")" separator="," >
				#{statOne}
				</foreach>
			</if>
			<if test="lecName != null and lecName != ''">
			and instr(lec_name, #{lecName}) > 0
			</if>
			<if test="memberNick != '' and memberNick != null">
			and instr(member_nick, #{memberNick}) > 0
			</if>
			<if test="lecLocRegion != null and lecLocRegion != ''">
<!-- 				<foreach item="regionOne" collection="lecLocRegion" separator="or"> -->
					and instr(lec_loc_region, #{lecLocRegion}) > 0
<!-- 				</foreach> -->
			</if>

			<!-- choose 구문은 switch 처럼 when이 case 역할, otherwise가 default 역할 -->
			<choose>
				<when test="minPrice != '' and minPrice != null and maxPrice != '' and maxPrice != null">
				and lec_price between #{minPrice} and #{maxPrice}
				</when>
				<when test="minPrice != '' and minPrice != null">
				<!-- CDATA 구문을 작성하면 해당 영역은 XML로 해석되지 않으므로 특수문자를 작성할 수 있다 -->
				<![CDATA[			
				and lec_price >= #{minPrice}
				]]>
				</when>
				<when test="maxPrice != '' and maxPrice != null">
				<![CDATA[			
				and lec_price <= #{maxPrice}
				]]>
				</when>
			</choose>
			
			<choose>
				<when test="minCount != '' and minCount != null and maxCount != '' and maxCount != null">
				and lec_head_count between #{minCount} and #{maxCount}
				</when>
				<when test="minCount != '' and minCount != null">
				<!-- CDATA 구문을 작성하면 해당 영역은 XML로 해석되지 않으므로 특수문자를 작성할 수 있다 -->
				<![CDATA[			
				and lec_head_count >= #{minCount}
				]]>
				</when>
				<when test="maxCount != '' and maxCount != null">
				<![CDATA[			
				and lec_head_count <= #{maxCount}
				]]>
				</when>
			</choose>
			
			<choose>
				<when test="minConCount != '' and minConCount != null and maxConCount != '' and maxConCount != null">
				and lec_contains_count between #{minConCount} and #{maxConCount}
				</when>
				<when test="minConCount != '' and minConCount != null">
				<!-- CDATA 구문을 작성하면 해당 영역은 XML로 해석되지 않으므로 특수문자를 작성할 수 있다 -->
				<![CDATA[			
				and lec_contains_count >= #{minConCount}
				]]>
				</when>
				<when test="maxConCount != '' and maxConCount != null">
				<![CDATA[			
				and lec_contains_count <= #{maxConCount}
				]]>
				</when>
			</choose>
			
<!-- 			<if test="lecStartStart != null and lecStartFinish != null"> -->
<!-- 			and lec_start between  -->
<!-- 				to_date(#{lecStartStart}||' '||'00:00:00', 'YYYY-MM-DD HH24:MI:SS')  -->
<!-- 				and  -->
<!-- 				to_date(#{lecStartFinish}||' '||'23:59:59', 'YYYY-MM-DD HH24:MI:SS') -->
<!-- 			</if> -->
<!-- 			<if test="lecEndStart != null and lecEndFinish != null"> -->
<!-- 			and expire between  -->
<!-- 				to_date(#{lecEndStart}||' '||'00:00:00', 'YYYY-MM-DD HH24:MI:SS')  -->
<!-- 				and  -->
<!-- 				to_date(#{lecEndFinish}||' '||'23:59:59', 'YYYY-MM-DD HH24:MI:SS') -->
<!-- 			</if> -->
		</where>
		
<!-- 		<if test="orders != null and orders.size() > 0"> -->
<!-- 			order by  -->
<!-- 			<foreach item="vo" collection="orders" separator=","> -->
<!-- 				${vo.order} ${vo.sort} -->
<!-- 			</foreach> -->
<!-- 		</if> -->
		order by l.lec_idx desc
		  )
	</select>
	
	
	<!-- 강좌 목록 및 검색 -->
	<select id="listSearch" parameterType="LecSearchVO" resultType="LecListVO">
		select L.lec_idx, L.lec_category_name, L.lec_name, M.member_nick, L.lec_price, L.lec_head_count, 
			L.lec_contains_count, L.lec_start, L.lec_end, L.lec_loc_region,
			(select count(is_like) from lec_like where lec_idx = L.lec_idx and is_like = 1)as lec_like
			from lec L
		left outer join tutor T on L.tutor_idx = T.tutor_idx
		left outer join member M on T.member_idx = M.member_idx
		
		<where>
			<if test="lecIdx != null and lecIdx != ''">
			and lec_idx = #{lecIdx}
			</if>
			<if test="lecCategoryName != null and lecCategoryName != ''">
				and lec_category_name in
				<foreach item="statOne" collection="lecCategoryName" open="(" close=")" separator="," >
				#{statOne}
				</foreach>
			</if>
			<if test="lecName != null and lecName != ''">
			and instr(lec_name, #{lecName}) > 0
			</if>
			<if test="memberNick != '' and memberNick != null">
			and instr(member_nick, #{memberNick}) > 0
			</if>
			<if test="lecLocRegion != '' and lecLocRegion != null">
			and instr(lec_loc_region, #{lecLocRegion}) > 0
			</if>
			

			<!-- choose 구문은 switch 처럼 when이 case 역할, otherwise가 default 역할 -->
			
			<choose>
				<when test="minPrice != '' and minPrice != null and maxPrice != '' and maxPrice != null">
				and lec_price between #{minPrice} and #{maxPrice}
				</when>
				<when test="minPrice != '' and minPrice != null">
				<!-- CDATA 구문을 작성하면 해당 영역은 XML로 해석되지 않으므로 특수문자를 작성할 수 있다 -->
				<![CDATA[			
				and lec_price >= #{minPrice}
				]]>
				</when>
				<when test="maxPrice != '' and maxPrice != null">
				<![CDATA[			
				and lec_price <= #{maxPrice}
				]]>
				</when>
			</choose>
			
			<choose>
				<when test="minCount != '' and minCount != null and maxCount != '' and maxCount != null">
				and lec_head_count between #{minCount} and #{maxCount}
				</when>
				<when test="minCount != '' and minCount != null">
				<!-- CDATA 구문을 작성하면 해당 영역은 XML로 해석되지 않으므로 특수문자를 작성할 수 있다 -->
				<![CDATA[			
				and lec_head_count >= #{minCount}
				]]>
				</when>
				<when test="maxCount != '' and maxCount != null">
				<![CDATA[			
				and lec_head_count <= #{maxCount}
				]]>
				</when>
			</choose>
			
			<choose>
				<when test="minConCount != '' and minConCount != null and maxConCount != '' and maxConCount != null">
				and lec_contains_count between #{minConCount} and #{maxConCount}
				</when>
				<when test="minConCount != '' and minConCount != null">
				<!-- CDATA 구문을 작성하면 해당 영역은 XML로 해석되지 않으므로 특수문자를 작성할 수 있다 -->
				<![CDATA[			
				and lec_contains_count >= #{minConCount}
				]]>
				</when>
				<when test="maxConCount != '' and maxConCount != null">
				<![CDATA[			
				and lec_contains_count <= #{maxConCount}
				]]>
				</when>
			</choose>
			
<!-- 			<if test="lecStartStart != null and lecStartFinish != null"> -->
<!-- 			and lec_start between  -->
<!-- 				to_date(#{lecStartStart}||' '||'00:00:00', 'YYYY-MM-DD HH24:MI:SS')  -->
<!-- 				and  -->
<!-- 				to_date(#{lecStartFinish}||' '||'23:59:59', 'YYYY-MM-DD HH24:MI:SS') -->
<!-- 			</if> -->
<!-- 			<if test="lecEndStart != null and lecEndFinish != null"> -->
<!-- 			and expire between  -->
<!-- 				to_date(#{lecEndStart}||' '||'00:00:00', 'YYYY-MM-DD HH24:MI:SS')  -->
<!-- 				and  -->
<!-- 				to_date(#{lecEndFinish}||' '||'23:59:59', 'YYYY-MM-DD HH24:MI:SS') -->
<!-- 			</if> -->
		</where>
		
<!-- 		<if test="orders != null and orders.size() > 0"> -->
<!-- 			order by  -->
<!-- 			<foreach item="vo" collection="orders" separator=","> -->
<!-- 				${vo.order} ${vo.sort} -->
<!-- 			</foreach> -->
<!-- 		</if> -->
		
	</select>
	
	<!-- 강좌 수정 -->
	<update id="update" parameterType="LecDto">
		UPDATE lec
		<trim prefix="SET" suffixOverrides=",">
			<if test="lecCategoryName != null">lec_category_name = #{lecCategoryName},</if>
			<if test="placeIdx != null">place_idx = #{placeIdx},</if>
			<if test="lecName != null and !lecName.equals('')">lec_name = #{lecName},</if>
			<if test="lecDetail != null and !lecDetail.equals('')">lec_detail = #{lecDetail},</if>
			<if test="lecPrice != null and !lecPrice.equals('')">lec_price = #{lecPrice},</if>
			<if test="lecHeadCount != null and !lecHeadCount.equals('')">lec_head_count = #{lecHeadCount},</if>
			<if test="lecContainsCount != null and !lecContainsCount.equals('')">lec_contains_count = #{lecContainsCount},</if>
			<if test="lecStart != null and !lecStart.equals('')">lec_start = TO_DATE(#{lecStart}),</if>
			<if test="lecEnd != null and !lecEnd.equals('')">lec_end = TO_DATE(#{lecEnd}),</if>
			<if test="lecLocRegion != null and !lecLocRegion.equals('')">lec_loc_region = #{lecLocRegion},</if>
			<if test="lecLocLatitude != null and !lecLocLatitude.equals('')">lec_loc_latitude = #{lecLocLatitude},</if>
			<if test="lecLocLongitude!= null and !lecLocLongitude.equals('')">lec_loc_longitude = #{lecLocLongitude},</if>
		</trim>
		WHERE lec_idx = ${lecIdx}
	</update>
	
	<!--  강좌 삭제 -->
	<delete id="delete" parameterType="int">
		delete from lec where lec_idx = #{lecIdx}
	</delete>
	
	
	
	<!-- 강좌 신청(lecCurrentCount + 1) -->
	<update id="countPlus" parameterType="int">
		update lec set
		lec_current_count = lec_current_count + 1
		where lec_idx = #{lecIdx}
	</update>
	<!-- 강좌 신청 취소(lecCurrentCount - 1) -->
	<update id="countMinus" parameterType="int">
		update lec set
		lec_current_count = lec_current_count - 1
		where lec_idx = #{lecIdx}
	</update>
		
	
	<!-- 강좌 현재 신청 인원 카운트 (lec_my에서 count(*)를 불러오면된다)-->
	
</mapper>
