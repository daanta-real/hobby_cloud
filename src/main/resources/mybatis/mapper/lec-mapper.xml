<?xml version="1.0" encoding="UTF-8" ?>

<!-- 
	myBatis 매퍼 파일
	- DBMS에서 실행할 SQL 구문을 저장하는 XML 파일
	- namespace를 통해서 여러 개의 매퍼를 구분한다
	- 테이블 당 1개씩 만드는 것이 일반적이며, 따라서 namespace를 테이블명으로 작성하면 구분이 용이하다.
	- <insert> , <select> , <update> , <delete>를 이용해서 CRUD 구문을 작성한다.
	- 각 구문은 외부에서 호출이 가능하도록 반드시 ID를 겹치지 않게 부여해야 한다.
	- parameterType 은 구문을 실행하기 위해 필요한 데이터의 형태를 말한다.
	- resultType은 구문을 실행한 결과를 어떤 형태로 변환해야 하는지를 말한다.
 -->

<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="lec">
	
	<!-- 등록을 하려면 시퀀스번호를 얻어내야 한다 -->
	<select id="seq" resultType="int">
		select lec_seq.nextval from dual
	</select>
	
	<!-- 강좌 등록 -->
	<insert id="register" parameterType="LecDto">
		insert into lec
		values (
			#{lecIdx}, #{tutorIdx}, #{lecCategoryName}, #{placeIdx}, #{lecName},
			#{lecDetail}, sysdate , #{lecPrice}, #{lecHeadCount}, #{lecContainsCount},
			#{lecStart}, #{lecEnd}, null, null, null,
			0, 0, 0
		)
	</insert>
<!-- 	<insert id="registerVO" parameterType="LecDto"> -->
<!-- 		insert into lec -->
<!-- 		values ( -->
<!-- 			lec_seq.nextval, 1, #{lecCategoryName}, #{placeIdx}, #{lecName}, -->
<!-- 			#{lecDetail}, sysdate , #{lecPrice}, #{lecHeadCount}, #{lecContainsCount}, -->
<!-- 			#{lecStart}, #{lecEnd}, #{lecLocRegion}, null, null, -->
<!-- 			0, 0, 0 -->
<!-- 		) -->
<!-- 	</insert> -->
	
	<!-- 강좌 상세 -->
	<select id="get" parameterType="int" resultType="LecDetailVO">
		select L.*, T.tutor_detail, T.tutor_registered , M.member_nick, M.member_email, M.member_phone, 
		P.place_name, P.place_detail, 
		(select count(is_like) from lec_like where lec_idx = L.lec_idx and is_like = 1)as lec_like
		from lec L
		inner join tutor T on L.tutor_idx = T.tutor_idx
		inner join place P on L.place_idx = P.place_idx
		inner join member M on T.member_idx = M.member_idx
		where lec_idx = #{lecIdx}
	</select>
	
	<!-- 강좌 목록 -->
	<select id="list" resultType="LecListVO">
		select L.lec_idx, L.lec_category_name, L.lec_name, M.member_nick, L.lec_price, L.lec_head_count, 
			L.lec_contains_count, L.lec_start, L.lec_end, L.lec_loc_region, 
			(select count(is_like) from lec_like where lec_idx = L.lec_idx and is_like = 1)as lec_like
			from lec L
		left outer join tutor T on L.tutor_idx = T.tutor_idx
		left outer join member M on T.member_idx = M.member_idx
	</select>
	
	<!-- 강좌 목록 및 검색 -->
	<select id="listSearch" parameterType="map" resultType="LecListVO">
		select L.lec_idx, L.lec_category_name, L.lec_name, M.member_nick, L.lec_price, L.lec_head_count, 
			L.lec_contains_count, L.lec_start, L.lec_end, L.lec_loc_region,
			(select count(is_like) from lec_like where lec_idx = L.lec_idx and is_like = 1)as lec_like
			from lec L
		left outer join tutor T on L.tutor_idx = T.tutor_idx
		left outer join member M on T.member_idx = M.member_idx
		
		<where>
			<if test="lecIdx != '' and lecIdx != null">
			and lec_idx = #{lecIdx}
			</if>
			<if test="lecCategoryName != '' and lecCategoryName != null">
			and instr(lec_category_name, #{lecCategoryName}) > 0
			</if>
			<if test="lecName != '' and lecName != null">
			and instr(lec_name, #{lecName}) > 0
			</if>
			<if test="memberNick != '' and memberNick != null">
			and instr(member_nick, #{memberNick}) > 0
			</if>
			<if test="lecLocRegion != '' and lecLocRegion != null">
			and instr(lec_loc_region, #{lecLocRegion}) > 0
			</if>
			

			<!-- choose 구문은 switch 처럼 when이 case 역할, otherwise가 default 역할 -->
			
			<choose>
				<when test="minPrice != null and maxPrice != null">
				and lec_price between #{minPrice} and #{maxPrice}
				</when>
				<when test="minPrice != null">
				<!-- CDATA 구문을 작성하면 해당 영역은 XML로 해석되지 않으므로 특수문자를 작성할 수 있다 -->
				<![CDATA[			
				and lec_price >= #{minPrice}
				]]>
				</when>
				<when test="maxPrice != null">
				<![CDATA[			
				and lec_price <= #{maxPrice}
				]]>
				</when>
			</choose>
			
			<choose>
				<when test="minCount != null and maxCount != null">
				and lec_head_count between #{minCount} and #{maxCount}
				</when>
				<when test="minCount != null">
				<!-- CDATA 구문을 작성하면 해당 영역은 XML로 해석되지 않으므로 특수문자를 작성할 수 있다 -->
				<![CDATA[			
				and lec_head_count >= #{minCount}
				]]>
				</when>
				<when test="maxCount != null">
				<![CDATA[			
				and lec_head_count <= #{maxCount}
				]]>
				</when>
			</choose>
			
			<choose>
				<when test="minConCount != null and maxConCount != null">
				and lec_contains_count between #{minConCount} and #{maxConCount}
				</when>
				<when test="minConCount != null">
				<!-- CDATA 구문을 작성하면 해당 영역은 XML로 해석되지 않으므로 특수문자를 작성할 수 있다 -->
				<![CDATA[			
				and lec_contains_count >= #{minConCount}
				]]>
				</when>
				<when test="maxConCount != null">
				<![CDATA[			
				and lec_contains_count <= #{maxConCount}
				]]>
				</when>
			</choose>
			
			<if test="lecStartStart != null and lecStartFinish != null">
			and lec_start between 
				to_date(#{lecStartStart}||' '||'00:00:00', 'YYYY-MM-DD HH24:MI:SS') 
				and 
				to_date(#{lecStartFinish}||' '||'23:59:59', 'YYYY-MM-DD HH24:MI:SS')
			</if>
			<if test="lecEndStart != null and lecEndFinish != null">
			and expire between 
				to_date(#{lecEndStart}||' '||'00:00:00', 'YYYY-MM-DD HH24:MI:SS') 
				and 
				to_date(#{lecEndFinish}||' '||'23:59:59', 'YYYY-MM-DD HH24:MI:SS')
			</if>
		</where>
		
<!-- 		<if test="orders != null and orders.size() > 0"> -->
<!-- 			order by  -->
<!-- 			<foreach item="vo" collection="orders" separator=","> -->
<!-- 				${vo.order} ${vo.sort} -->
<!-- 			</foreach> -->
<!-- 		</if> -->
	</select>
	
	<!-- 강좌 수정 -->
	<update id="edit" parameterType="lecDetailVO">
	
	</update>
	
	<!--  강좌 삭제 -->
	<delete id="delete" parameterType="int">
		delete lec where lec_idx = #{lecIdx}
	</delete>
	
</mapper>
