<?xml version="1.0" encoding="UTF-8" ?>

<!-- 
	myBatis 매퍼 파일
	- DBMS에서 실행할 SQL 구문을 저장하는 XML 파일
	- namespace를 통해서 여러 개의 매퍼를 구분한다
	- 테이블 당 1개씩 만드는 것이 일반적이며, 따라서 namespace를 테이블명으로 작성하면 구분이 용이하다.
	- <insert> , <select> , <update> , <delete>를 이용해서 CRUD 구문을 작성한다.
	- 각 구문은 외부에서 호출이 가능하도록 반드시 ID를 겹치지 않게 부여해야 한다.
	- parameterType 은 구문을 실행하기 위해 필요한 데이터의 형태를 말한다.
	- resultType은 구문을 실행한 결과를 어떤 형태로 변환해야 하는지를 말한다.
 -->

<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="gatherHeads">
 
<!-- 해당 소모임의 참가자 조회 -->
<select id="list" parameterType="int" resultType="GatherHeadsVO">
 select h.*, m.member_nick ,p.member_profile_idx from gather_heads h 
 left outer  join member m  
 ON h.member_idx = m.member_idx 
 left outer join member_profile p 
 on m.member_idx = p.member_idx
 where h.gather_idx=#{gatherIdx}
</select>
 
<!-- 소모임 참가  -->
<insert id="join" parameterType="GatherHeadsDto">
insert into gather_heads values(#{memberIdx},#{gatherIdx},1) 
</insert>

<!-- 소모임 취소 -->
<delete id="cancel" parameterType="GatherHeadsDto">
 delete gather_heads where member_idx=#{memberIdx} and gather_idx =#{gatherIdx}
</delete>

<!-- 인원 수 구하기 -->
<select id="countByGender" parameterType="int" resultType="GatherChartVO">
 select  count(*)"count",m.member_gender "memberGender"
 from gather_heads h 
 left outer  join member m  
 ON h.member_idx = m.member_idx 
 left outer join member_profile p 
 on m.member_idx = p.member_idx where h.gather_idx=#{gatherIdx}
 Group BY m.member_gender
</select>
</mapper>