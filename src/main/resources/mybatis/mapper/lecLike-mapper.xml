<?xml version="1.0" encoding="UTF-8" ?>

<!-- 
	myBatis 매퍼 파일
	- DBMS에서 실행할 SQL 구문을 저장하는 XML 파일
	- namespace를 통해서 여러 개의 매퍼를 구분한다
	- 테이블 당 1개씩 만드는 것이 일반적이며, 따라서 namespace를 테이블명으로 작성하면 구분이 용이하다.
	- <insert> , <select> , <update> , <delete>를 이용해서 CRUD 구문을 작성한다.
	- 각 구문은 외부에서 호출이 가능하도록 반드시 ID를 겹치지 않게 부여해야 한다.
	- parameterType 은 구문을 실행하기 위해 필요한 데이터의 형태를 말한다.
	- resultType은 구문을 실행한 결과를 어떤 형태로 변환해야 하는지를 말한다.
 -->

<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="lecLike">
	<!-- 해당 회원의 좋아요에 대한 정보 읽기 -->
	 <select id="likeCount" resultType="Integer" parameterType="LecLikeVO">
		select count(is_like) from lec_like where member_idx = #{memberIdx} and lec_idx=#{lecIdx}
	</select>
	
	<insert id="likeInsert" parameterType="LecLikeVO">
		insert into lec_like(member_idx, lec_idx)
		values (#{memberIdx}, #{lecIdx})
	</insert>
	
	<select id="likeGetInfo" resultType="Integer" parameterType="LecLikeVO">
		select is_like from lec_like where member_idx = #{memberIdx} and lec_idx = #{lecIdx}
	</select>
	
	<update id="likeUpdate" parameterType="LecLikeVO">
		update lec_like
		set <include refid="cal"></include>
		where member_idx = #{memberIdx} and lec_idx = #{lecIdx}
	</update>
	
	<sql id="cal">
		<if test="count == 1">
			is_like = 0
		</if> 
		
		<if test="count == 0">
			is_like = is_like + 1 
		</if>
	</sql>
</mapper>
