<?xml version="1.0" encoding="UTF-8" ?>

<!-- 
	myBatis 매퍼 파일
	- DBMS에서 실행할 SQL 구문을 저장하는 XML 파일
	- namespace를 통해서 여러 개의 매퍼를 구분한다
	- 테이블 당 1개씩 만드는 것이 일반적이며, 따라서 namespace를 테이블명으로 작성하면 구분이 용이하다.
	- <insert> , <select> , <update> , <delete>를 이용해서 CRUD 구문을 작성한다.
	- 각 구문은 외부에서 호출이 가능하도록 반드시 ID를 겹치지 않게 부여해야 한다.
	- parameterType 은 구문을 실행하기 위해 필요한 데이터의 형태를 말한다.
	- resultType은 구문을 실행한 결과를 어떤 형태로 변환해야 하는지를 말한다.
 -->

<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="gather">

<!-- 게시판 시퀸스 구하기 -->
<select id="getSequence" resultType="int">
select gather_seq.nextval from dual
</select>

<select id="list" resultType="GatherVO">
select * from  gather g left outer join
 (select distinct gather_idx, min(gather_file_idx) as gather_file_idx
  from gather_file group by gather_idx) f  
  on  f.gather_idx = g.gather_idx  
  order by g.gather_idx desc 
</select>

<!-- 게시글 총 개수 구하기 -->
<select id="listCount" resultType="int" >
select count(*) as BNO from (
select * from  gather g left outer join
 (select distinct gather_idx, min(gather_file_idx) as gather_file_idx
  from gather_file group by gather_idx) f  
  on  f.gather_idx = g.gather_idx)
</select>


<!-- 목록페이지 목록 페이지 네이션 적용 -->
<select id="listPage" resultType="GatherVO" parameterType="Criteria">
select * from(
select rownum  rn , TMP.* from(
select * from  gather g left outer join
 (select distinct gather_idx, min(gather_file_idx) as gather_file_idx
  from gather_file group by gather_idx) f  
  on  f.gather_idx = g.gather_idx  
 left outer join member m on g.member_idx = m.member_idx
 order by g.gather_idx desc
  )TMP
) where rn between #{rowStart} and #{rowEnd}
</select>
 
<!-- 검색페이지 페이지네이션 적용 -->
<select id ="listSearchBy" resultType="GatherVO" parameterType="CriteriaSearch"> 
select * from(
select rownum  rn , TMP.* from(
  select * from  gather g left outer join
 (select distinct gather_idx, min(gather_file_idx) as gather_file_idx
  from gather_file group by gather_idx) f  
  on  f.gather_idx = g.gather_idx  
 left outer join member m on g.member_idx = m.member_idx 
  <where> 
 <if test="gatherName != '' ">
  AND instr(gather_name,#{gatherName}) >0
  </if>
  	<if test="gatherLocRegion != null">
   	AND instr(gather_loc_region,#{gatherLocRegion}) >0
 	</if>
 	<if test="category != null">
 	AND lec_category_name in
	<foreach item="statOne" collection="category" open="(" close=")" separator="," >
	#{statOne}
	</foreach>
</if> 
  </where>
  order by g.gather_idx desc
    )TMP
) where rn between #{rowStart} and #{rowEnd}
</select>	
	
<!-- 검색페이지 총 개수 세기 -->
<select id="listCountBy" resultType="int" parameterType="GatherSearchVO" >
select count(*) as BNO from (
 select * from  gather g left outer join
 (select distinct gather_idx, min(gather_file_idx) as gather_file_idx
  from gather_file group by gather_idx) f  
  on  f.gather_idx = g.gather_idx 
  <where> 
 <if test="gatherName != '' ">
  AND instr(gather_name,#{gatherName}) >0
  </if>
  	<if test="gatherLocRegion != null">
   	AND instr(gather_loc_region,#{gatherLocRegion}) >0
 	</if>
 	<if test="category != null">
 	AND lec_category_name in
	<foreach item="statOne" collection="category" open="(" close=")" separator="," >
	#{statOne}
	</foreach>
</if> 
  </where>
  order by g.gather_idx desc
  )
</select>	
	
<!-- 게시판  목록 검색 -->
<!-- 장소 + 제목    유사 검색이 둘다 가능하다.-->	
	
<select id ="listSearch" parameterType="GatherSearchVO" resultType="GatherVO">
 select * from  gather g left outer join
 (select distinct gather_idx, min(gather_file_idx) as gather_file_idx
  from gather_file group by gather_idx) f  
  on  f.gather_idx = g.gather_idx 
  <where> 
 <if test="gatherName != '' ">
  AND instr(gather_name,#{gatherName}) >0
  </if>
  	<if test="gatherLocRegion != null">
   	AND instr(gather_loc_region,#{gatherLocRegion}) >0
 	</if>
 	<if test="category != null">
 	AND lec_category_name in
	<foreach item="statOne" collection="category" open="(" close=")" separator="," >
	#{statOne}
	</foreach>
</if> 
  </where>
  order by g.gather_idx desc
</select>


<!-- 게시판 등록 -->
<insert id="insert" parameterType="GatherDto">
insert into gather(gather_idx, member_idx, lec_category_name,
 place_idx, gather_name, gather_detail, gather_registered,
 gather_head_count, gather_loc_region, gather_loc_latitude,
 gather_loc_longitude,gather_start,gather_end,
 
 gather_max, gather_status)
values(#{gatherIdx},#{memberIdx},#{lecCategoryName},
#{placeIdx},#{gatherName},#{gatherDetail},sysdate,
#{gatherHeadCount},#{gatherLocRegion},#{gatherLocLatitude},
#{gatherLocLongitude},to_date(#{gatherStart},'YYYY-MM-DD hh24:mi'),
to_date(#{gatherEnd},'YYYY-MM-DD hh24:mi'),
#{gatherMax},#{gatherStaus}
)
</insert>


<select id="get" parameterType="int" resultType="GatherVO">
select g.*, m.member_nick 
from gather g  
left outer join
member m  
ON g.member_idx = m.member_idx
 where gather_idx=#{gatherIdx}
</select>

<!-- 삭제 -->
<delete id="delete" parameterType="int">
delete  gather where gather_idx= #{gatherIdx}
</delete>

<!-- 수정 -->
<update id="update" parameterType="GatherDto">
update gather set gather_name=#{gatherName}, 
lec_category_name=#{lecCategoryName}, 
place_idx=#{placeIdx}, gather_detail=#{gatherDetail}, 
gather_registered=sysdate,
gather_loc_region = #{gatherLocRegion},
 gather_loc_latitude=#{gatherLocLatitude},
 gather_loc_longitude=#{gatherLocLogitude}, 
gather_start=#{gatherStart}, 
gather_end =#{gatherEnd}, gather_max=#{gatherMax}
where gather_idx=#{gatherIdx}

</update>




<!-- 해당 게시물 댓글리스트 -->
<select id="replyList"  parameterType="map"     resultType="GatherReplyVO">
select * from(
select rownum  rn , TMP.* from(
select gr.*,m.member_nick from 
gather g 
inner join
gather_reply gr 
ON g.gather_idx = gr.gather_idx
left outer join
 member m
ON gr.member_idx = m.member_idx
where gr.gather_idx = #{gatherIdx}
  )TMP
) where rn between #{startRow} and #{endRow}
</select>

<!-- 댓글 입력 -->
<insert id="replyInsert" parameterType="GatherReplyDto">
insert into gather_reply values
(gather_reply_seq.nextval,#{memberIdx},#{gatherIdx},
#{gatherReplyDetail},sysdate,1,1,1)
</insert>


<!-- 댓글 삭제 -->
<delete id="replyDelete" parameterType="int">
delete  from gather_reply where gather_reply_idx=#{gatherReplyIdx}
</delete>

<!-- 댓글 수정 -->
<update id="replyEdit" parameterType="GatherReplyDto">
 update gather_reply set 
 gather_reply_detail=#{gatherReplyDetail},
 gather_reply_date=sysdate 
 where 
 gather_reply_idx =#{gatherReplyIdx}
</update>


</mapper>